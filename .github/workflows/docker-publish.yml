name: Docker Publish

on:
  push:
    branches: [main, develop, feature/*]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'develop'
        type: choice
        options: [develop, main]
      version:
        description: 'Version tag (optional)'
        required: false
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAMESPACE: code0ex

jobs:
  build-builder:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Définir ENV_TAG
        id: set-env
        run: |
          tag=$([[ "${{ github.event.inputs.environment }}" = "main" ]] && echo prod || echo pre-prod)
          echo "ENV_TAG=$tag" >> $GITHUB_ENV

      - name: Installer Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:latest

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & load builder stage
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          target: builder
          platforms: linux/amd64
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/builder:${{ env.ENV_TAG }}

      - name: Save builder image to tar
        run: |
          docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/builder:${{ env.ENV_TAG }} \
            | gzip > builder.tar.gz

      - name: Upload builder-image artifact
        uses: actions/upload-artifact@v4
        with:
          name: builder-image
          path: builder.tar.gz
          retention-days: 1

  build-and-push:
    needs: build-builder
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - image: ecowatch-api
            target: runner-api
          - image: ecowatch-web
            target: runner-web
          - image: ecowatch-mqtt-influxdb-service
            target: runner-mqtt-influxdb-service
          - image: ecowatch-data-simulator
            target: runner-data-simulator
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download builder-image artifact
        uses: actions/download-artifact@v4
        with:
          name: builder-image

      - name: Load builder image into Docker
        run: docker load -i builder.tar.gz

      - name: Définir ENV_TAG
        id: set-env
        run: |
          tag=$([[ "${{ github.event.inputs.environment }}" = "main" ]] && echo prod || echo pre-prod)
          echo "ENV_TAG=$tag" >> $GITHUB_ENV

      - name: Installer Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:latest

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (image ${{ matrix.image }})
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ matrix.image }}
          tags: |
            type=raw,value=${{ env.ENV_TAG }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable=${{ github.event.inputs.environment == 'main' }}

      - name: Build & push ${{ matrix.image }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          target: ${{ matrix.target }}
          platforms: linux/amd64
          push: true
          cache-from: |
            type=image,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/builder:${{ env.ENV_TAG }}
            type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
