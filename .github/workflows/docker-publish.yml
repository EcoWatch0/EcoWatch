name: Docker Publish

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement à déployer'
        required: true
        type: choice
        options:
          - develop
          - main
        default: develop
      version:
        description: 'Version (ex. 1.2.3) facultative'
        required: false
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAMESPACE: code0ex

jobs:
  prepare:
    name: Préparer VERSION & ENV_TAG
    runs-on: ubuntu-latest
    outputs:
      ENV_TAG: ${{ steps.set-env.outputs.ENV_TAG }}
      VERSION: ${{ steps.set-version.outputs.VERSION }}
    steps:
      - name: Checkout complet
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Détecter l'environnement
        id: set-env
        run: |
          ref=${GITHUB_REF#refs/*/}
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            echo "::set-output name=ENV_TAG::prod"
          elif [[ "$ref" == "main" ]]; then
            echo "::set-output name=ENV_TAG::prod"
          elif [[ "$ref" == "develop" ]]; then
            echo "::set-output name=ENV_TAG::pre-prod"
          else
            echo "::set-output name=ENV_TAG::dev"
          fi

      - name: Calculer la version
        id: set-version
        run: |
          # Si on a poussé un tag vX.Y.Z
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            VER=${GITHUB_REF#refs/tags/v}
          else
            # Récupérer dernier tag semver (ou v0.0.0 si aucun)
            LATEST=$(git describe --tags --match "v[0-9]*" --abbrev=0 2>/dev/null || echo v0.0.0)
            IFS='.' read -r MAJ MIN PAT <<< "${LATEST#v}"
            case "${{ steps.set-env.outputs.ENV_TAG }}" in
              prod)    ((PAT++)) ;;
              pre-prod) ((MIN++)); PAT=0 ;;
              dev)     ((PAT++)) ;;
            esac
            BASE="v${MAJ}.${MIN}.${PAT}"
            if [[ "${{ steps.set-env.outputs.ENV_TAG }}" == "dev" ]]; then
              SHA=$(git rev-parse --short HEAD)
              VER="${BASE}-dev-${SHA}"
            else
              # On retire le "v" pour le tag docker
              VER="${BASE#v}-${{ steps.set-env.outputs.ENV_TAG }}"
            fi
          fi
          echo "::set-output name=VERSION::${VER}"

  build-builder:
    name: Construire l'image builder
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Installer Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: image=moby/buildkit:latest

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & load builder stage
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          target: builder
          platforms: linux/amd64
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/builder:${{ needs.prepare.outputs.ENV_TAG }}

      - name: Sauvegarder l'image builder en tar
        run: |
          docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/builder:${{ needs.prepare.outputs.ENV_TAG }} \
            | gzip > builder.tar.gz

      - name: Upload de l'artefact builder
        uses: actions/upload-artifact@v4
        with:
          name: builder-image
          path: builder.tar.gz
          retention-days: 1

  build-and-publish:
    name: Build & Push des services
    needs:
      - prepare
      - build-builder
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: ecowatch-api
            target: runner-api
          - service: ecowatch-web
            target: runner-web
          - service: ecowatch-mqtt-influxdb-service
            target: runner-mqtt-influxdb-service
          - service: ecowatch-data-simulator
            target: runner-data-simulator
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Télécharger l'artefact builder
        uses: actions/download-artifact@v4
        with:
          name: builder-image

      - name: Charger l'image builder
        run: docker load -i builder.tar.gz

      - name: Installer Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (${{ matrix.service }})
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ matrix.service }}
          tags: |
            type=raw,value=${{ needs.prepare.outputs.VERSION }}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable=${{ needs.prepare.outputs.ENV_TAG == 'prod' }}

      - name: Build & Push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          target: ${{ matrix.target }}
          platforms: linux/amd64
          push: true
          cache-from: |
            type=docker,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/builder:${{ needs.prepare.outputs.ENV_TAG }}
            type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
